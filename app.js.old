import express from "express";
import cors from "cors";
import fs from "fs";
import path from "path";
import { fileURLToPath } from "url";
import dotenv from "dotenv";
import { initializeData } from "./server/data/store.js";
import logger from "./server/middleware/logger.js";

// Diret√≥rios √∫teis para ES modules
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Carregar vari√°veis de ambiente
dotenv.config({
  path: process.env.NODE_ENV === "production"
    ? path.join(__dirname, ".env.production")
    : path.join(__dirname, ".env.development"),
});

// Importar rotas
import authRoutes from "./routes/auth.js";
import logoRoutes from "./routes/logo.js";
import videoRoutes from "./routes/videos.js";
import contentRoutes from "./routes/content.js";
import blockRoutes from "./routes/blocks.js";
import settingsRoutes from "./routes/settings.js";
import imageRoutes from "./routes/images.js";
import formRoutes from "./routes/forms.js";
import userRoutes from "./routes/users.js";
import dashboardRoutes from "./routes/dashboard.js";

const app = express();
const PORT = process.env.PORT || 5000;

// CORS configurado corretamente
app.use(cors({
  origin: function (origin, callback) {
    const allowedOrigins = [
      "https://www.jotasolucoes.com.br",
      "https://www.bancojota.com.br", 
      "https://www.metodocor.com.br",
      "http://localhost:3000",
      "http://localhost:5173",
      "http://127.0.0.1:3000",
      "http://127.0.0.1:5173",
      `http://212.85.10.205:${PORT}`,
      `http://localhost:${PORT}`
    ];
    
    // Permitir requisi√ß√µes sem origin (mobile apps, postman, etc.)
    if (!origin) return callback(null, true);
    
    if (allowedOrigins.indexOf(origin) !== -1) {
      callback(null, true);
    } else {
      console.log(`‚ùå Origem n√£o permitida pelo CORS: ${origin}`);
      callback(new Error('N√£o permitido pelo CORS'));
    }
  },
  credentials: true,
  methods: ["GET", "POST", "PUT", "DELETE", "OPTIONS", "PATCH"],
  allowedHeaders: [
    "Content-Type", 
    "Authorization", 
    "X-Requested-With",
    "Accept",
    "Origin",
    "Cache-Control",
    "X-File-Name"
  ],
  exposedHeaders: ["Content-Length", "X-Foo", "X-Bar"],
  maxAge: 86400 // 24 horas
}));

// Middleware para tratar requisi√ß√µes OPTIONS
app.options('/*path', (req, res) => {
  res.header('Access-Control-Allow-Origin', req.headers.origin || '*');
  res.header('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS, PATCH');
  res.header('Access-Control-Allow-Headers', 'Content-Type, Authorization, X-Requested-With, Accept, Origin, Cache-Control, X-File-Name');
  res.header('Access-Control-Allow-Credentials', 'true');
  res.sendStatus(200);
});

// Middleware de parsing
app.use(express.json({ limit: '50mb' }));
app.use(express.urlencoded({ extended: true, limit: '50mb' }));

// Logger middleware
app.use(logger);

// Criar diret√≥rios de upload primeiro
const uploadDirs = [
  "uploads",
  "uploads/logos", 
  "uploads/videos",
  "uploads/images",
];

uploadDirs.forEach(dir => {
  const fullPath = path.join(__dirname, dir);
  if (!fs.existsSync(fullPath)) {
    fs.mkdirSync(fullPath, { recursive: true });
    console.log(`üìÅ Diret√≥rio criado: ${fullPath}`);
  }
});

// Servir arquivos est√°ticos
app.use("/uploads", express.static(path.join(__dirname, "uploads"), {
  maxAge: '1d',
  etag: false
}));

// Health check melhorado
app.get("/api/health", (req, res) => {
  res.json({
    status: "OK",
    message: "Backend est√° funcionando!",
    timestamp: new Date().toISOString(),
    version: process.env.npm_package_version || "1.0.0",
    node_version: process.version,
    environment: process.env.NODE_ENV || "development",
    port: PORT
  });
});

// Rota de debug
app.get("/api", (req, res) => {
  res.json({
    message: "API est√° funcionando!",
    server_time: new Date().toISOString(),
    rotas_disponiveis: [
      "POST /api/auth/login",
      "POST /api/auth/logout", 
      "GET /api/auth/verify",
      "GET /api/health",
      "GET /api/logo",
      "POST /api/logo",
      "GET /api/settings",
      "PUT /api/settings",
      "GET /api/users",
      "POST /api/users",
      "GET /api/dashboard",
      "GET /api/images",
      "POST /api/images",
      "GET /api/videos",
      "POST /api/videos",
      "GET /api/content",
      "POST /api/content",
      "GET /api/blocks",
      "POST /api/blocks",
      "GET /api/forms",
      "POST /api/forms",
      "GET /api/content/landing",
      "GET /api/content/landing/:slug",
      "PUT /api/content/landing/:slug",
      "DELETE /api/content/landing/:slug",
    ],
  });
});

// Rotas da API
app.use("/api/auth", authRoutes);
app.use("/api/logo", logoRoutes);
app.use("/api/videos", videoRoutes);
app.use("/api/content", contentRoutes);
app.use("/api/blocks", blockRoutes);
app.use("/api/settings", settingsRoutes);
app.use("/api/images", imageRoutes);
app.use("/api/forms", formRoutes);
app.use("/api/users", userRoutes);
app.use("/api/dashboard", dashboardRoutes);

// Rota raiz
app.get("/", (req, res) => {
  res.json({
    message: "Painel Admin Backend est√° funcionando!",
    status: "OK",
    api_endpoint: "/api",
    documentation: "/api",
    health_check: "/api/health",
    server_time: new Date().toISOString()
  });
});

// Middleware de tratamento de erros melhorado
app.use((err, req, res, next) => {
  console.error("‚ùå Erro detalhado:", {
    message: err.message,
    stack: err.stack,
    url: req.url,
    method: req.method,
    headers: req.headers,
    body: req.body
  });

  // Erros espec√≠ficos
  if (err.message && err.message.includes("Missing parameter name")) {
    return res.status(400).json({
      error: "Erro na defini√ß√£o da rota",
      message: "Par√¢metro de rota mal formatado",
      status: 400
    });
  }

  if (err.name === 'ValidationError') {
    return res.status(400).json({
      error: "Erro de valida√ß√£o",
      message: err.message,
      status: 400
    });
  }

  if (err.name === 'CastError') {
    return res.status(400).json({
      error: "Erro de formato de dados",
      message: "ID inv√°lido fornecido",
      status: 400
    });
  }

  // Erro gen√©rico
  res.status(err.status || 500).json({
    error: "Algo deu errado!",
    message: process.env.NODE_ENV === "development" 
      ? err.message 
      : "Erro interno do servidor",
    status: err.status || 500,
    timestamp: new Date().toISOString()
  });
});

// Middleware 404
app.use((req, res) => {
  console.log(`‚ùå Rota n√£o encontrada: ${req.method} ${req.url}`);
  res.status(404).json({ 
    error: "Rota n√£o encontrada",
    message: `A rota ${req.method} ${req.url} n√£o existe`,
    status: 404,
    timestamp: new Date().toISOString()
  });
});

// Fun√ß√£o para inicializar servidor
const startServer = async () => {
  try {
    console.log("üîÑ Inicializando dados...");
    await initializeData();
    console.log("‚úÖ Dados inicializados com sucesso!");

    const server = app.listen(PORT, "0.0.0.0", () => {
      console.log(`üöÄ Servidor rodando na porta ${PORT}`);
      console.log(`üì° API dispon√≠vel em http://0.0.0.0:${PORT}/api`);
      console.log(`üåê Acesso pelo IP: http://212.85.10.205:${PORT}/api`);
      console.log(`üè† Localhost: http://localhost:${PORT}/api`);
      console.log("üåê CORS liberado para:");
      [
        "https://www.jotasolucoes.com.br",
        "https://www.bancojota.com.br",
        "https://www.metodocor.com.br", 
        "http://localhost:3000",
        "http://localhost:5173",
        `http://212.85.10.205:${PORT}`,
        `http://localhost:${PORT}`
      ].forEach(d => console.log("  ‚úì", d));
      
      console.log(`üìù Ambiente: ${process.env.NODE_ENV || "development"}`);
      console.log(`üìä Health check: http://localhost:${PORT}/api/health`);
    });

    // Graceful shutdown
    process.on('SIGTERM', () => {
      console.log('üõë SIGTERM recebido. Fechando servidor graciosamente...');
      server.close(() => {
        console.log('‚úÖ Servidor fechado.');
        process.exit(0);
      });
    });

    process.on('SIGINT', () => {
      console.log('üõë SIGINT recebido. Fechando servidor graciosamente...');
      server.close(() => {
        console.log('‚úÖ Servidor fechado.');
        process.exit(0);
      });
    });

    return server;

  } catch (error) {
    console.error("‚ùå Erro ao iniciar servidor:", {
      message: error.message,
      stack: error.stack
    });
    process.exit(1);
  }
};

// Se executado diretamente
if (import.meta.url === `file://${process.argv[1]}`) {
  startServer();
}

export default app;
export { startServer };

